/***
 * 写一个函数，输入 n ，求斐波那契（Fibonacci）数列的第 n 项（即 F(N)）。斐波那契数列的定义如下：
 * F(0) = 0,   F(1) = 1
 * F(N) = F(N - 1) + F(N - 2), 其中 N > 1.
 * 斐波那契数列由 0 和 1 开始，之后的斐波那契数就是由之前的两数相加而得出。
 *
 * 答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。
 */


/**
 * 【动态规划】
 * 不用递归：时间开销肯定是很难顶的，而且有大量重复的工作，如果n的值很高的时候，其实像n=2这种值会被算非常多次。
 * 也就是说递归函数会在 n=小值 上调用非常多次
 *
 * 不用新建长度为n的数组： 这种思路的确避免了递归的时间开销，但是空间上面来说没有必要，真正有用的只有三个数，前两个以及总和
 */
public class JZ_10 {
    public int fib(int n) {
        if (n == 0) return 0;
        int fn0 = 0;
        int fn1 = 1;
        int temp;
        for (int i = 2; i <= n; i++) {
            temp = fn0 + fn1;
            fn0 = fn1; // 上一轮已经取余过了，不用再取了
            fn1 = temp % 1000000007;
        }
            return fn1;
        }

    }

